/*
 * module different macro
 *
 * Copyright (C) 2008 Renesas Solutions Corp.
 * Kuninori Morimoto <morimoto.kuninori@renesas.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __MODULE_DIFF_H__
#define __MODULE_DIFF_H__

#include "./../module_comm/module_comm.h"
#include "./../host_comm/owl_device.h"

#define CAMERA_MODULE_NAME		"GC2155"
#define CAMERA_MODULE_PID		0x2155
#define MODULE_I2C_REAL_ADDRESS		(0x78>>1)
#define MODULE_I2C_REG_ADDRESS		(0x78>>1)
#define I2C_REGS_WIDTH			1
#define I2C_DATA_WIDTH			1

#define PIDH		0xf0	/* Product ID Number H byte */
#define PIDL		0xf1	/* Product ID Number L byte */

#define OUTTO_SENSO_CLOCK		24000000

#define DEFAULT_VSYNC_ACTIVE_LEVEL		V4L2_MBUS_VSYNC_ACTIVE_HIGH
#define DEFAULT_HSYNC_ACTIVE_LEVEL		V4L2_MBUS_HSYNC_ACTIVE_HIGH
#define DEFAULT_PCLK_SAMPLE_EDGE		V4L2_MBUS_PCLK_SAMPLE_RISING
#define DEFAULT_POWER_LINE_FREQUENCY	V4L2_CID_POWER_LINE_FREQUENCY_50HZ

#define MODULE_DEFAULT_WIDTH	WIDTH_SVGA
#define MODULE_DEFAULT_HEIGHT	HEIGHT_SVGA
#define MODULE_MAX_WIDTH		WIDTH_UXGA
#define MODULE_MAX_HEIGHT		HEIGHT_UXGA

#define AHEAD_LINE_NUM			15
#define DROP_NUM_CAPTURE		0
#define DROP_NUM_PREVIEW		0

/*Every sensor must set this value*/
#define USE_AS_FRONT 0
#define USE_AS_REAR 1

static unsigned int frame_rate_svga[] = { 30, };
static unsigned int frame_rate_720p[] = { 30, };
static unsigned int frame_rate_uxga[] = { 30, };

/*
MIPI SENSOR params setting
*/
/*
static struct mipi_setting mipi_sensor_setting = {
    .lan_num = 0,    //0~3
    .contex0_en = 1,
    .contex0_virtual_num = 0,
//MIPI_YUV422 MIPI_RAW8 MIPI_RAW10 MIPI_RAW12
    .contex0_data_type = MIPI_YUV422,
    .clk_settle_time = 10,  //8
    .clk_term_time = 8,    //6
    .data_settle_time = 10,  //8
    .data_term_time = 8,    //6
    .crc_en = 1,
    .ecc_en = 1,
    .hclk_om_ent_en = 1,
    .lp11_not_chek = 0,
    .hsclk_edge = 0,   //0: rising edge; 1: falling edge
    .lane0_map = 0,
    .lane1_map = 1,
    .lane2_map = 2,
    .lane3_map = 3,
    .mipi_en = 1,
    .csi_clk = 165000000,
};
*/
/*
ISP Interface params setting
*/
static struct host_module_setting_t module_setting = {
	.hs_pol = 1,		/*0: active low 1:active high */
	.vs_pol = 1,		/*0: active low 1:active high */
	.clk_edge = 0,		/*0: rasing edge 1:falling edge */
	/*0: BG/GR, U0Y0V0Y1, 1: GR/BG, V0Y0U0Y1,
	* 2: GB/RG, Y0U0Y1V0, 3: RG/GB, Y0V0Y1U0 */
	.color_seq = COLOR_SEQ_UYVY,
};

struct module_info camera_module_info = {
	.flags = 0
	    | SENSOR_FLAG_10BIT
	    | SENSOR_FLAG_YUV | SENSOR_FLAG_DVP | SENSOR_FLAG_CHANNEL0,
	/*.mipi_cfg = &mipi_sensor_setting, */
	.module_cfg = &module_setting,
};

/*
 * supported color format list.
 * see definition in
 * http://thread.gmane.org/gmane.linux.drivers.video-input-infrastructure/
 * 12830/focus=13394
 * YUYV8_2X8_LE == YUYV with LE packing
 * YUYV8_2X8_BE == UYVY with LE packing
 * YVYU8_2X8_LE == YVYU with LE packing
 * YVYU8_2X8_BE == VYUY with LE packing
 */
static const struct module_color_format module_cfmts[] = {
	{
	 .code = V4L2_MBUS_FMT_UYVY8_2X8,
	 .colorspace = V4L2_COLORSPACE_JPEG,
	 },
};

static const struct regval_list module_init_regs[] = {
	{1, 0xfe, 0xf0},
	{1, 0xfe, 0xf0},
	{1, 0xfe, 0xf0},
	{1, 0xfc, 0x06},
	{1, 0xf6, 0x00},
	{1, 0xf7, 0x1d},
	{1, 0xf8, 0x84},
	{1, 0xfa, 0x00},
	{1, 0xf9, 0xfe},
	{1, 0xf2, 0x00},
	{1, 0xfe, 0x00},
	{1, 0x03, 0x04},
	{1, 0x04, 0xe2},
	{1, 0x09, 0x00},
	{1, 0x0a, 0x00},
	{1, 0x0b, 0x00},
	{1, 0x0c, 0x00},
	{1, 0x0d, 0x04},
	{1, 0x0e, 0xc0},
	{1, 0x0f, 0x06},
	{1, 0x10, 0x50},
	{1, 0x12, 0x2e},
	{1, 0x17, 0x14},	/* mirror */
	{1, 0x18, 0x02},
	{1, 0x19, 0x0e},
	{1, 0x1a, 0x01},
	{1, 0x1b, 0x4b},
	{1, 0x1c, 0x07},
	{1, 0x1d, 0x10},
	{1, 0x1e, 0x98},
	{1, 0x1f, 0x78},
	{1, 0x20, 0x05},
	{1, 0x21, 0x40},
	{1, 0x22, 0xf0},
	{1, 0x24, 0x16},
	{1, 0x25, 0x01},
	{1, 0x26, 0x10},
	{1, 0x2d, 0x40},
	{1, 0x30, 0x01},
	{1, 0x31, 0x90},
	{1, 0x33, 0x04},
	{1, 0x34, 0x01},
	{1, 0xfe, 0x00},
	{1, 0x80, 0xff},
	{1, 0x81, 0x2c},
	{1, 0x82, 0xfa},
	{1, 0x83, 0x00},
	{1, 0x84, 0x00},	/*yuv 01 */
	{1, 0x85, 0x08},
	{1, 0x86, 0x03},
	{1, 0x89, 0x03},
	{1, 0x8a, 0x00},
	{1, 0x8b, 0x00},
	{1, 0xb0, 0x55},
	{1, 0xc3, 0x11},	/*00 */
	{1, 0xc4, 0x20},
	{1, 0xc5, 0x30},
	{1, 0xc6, 0x38},
	{1, 0xc7, 0x40},
	{1, 0xec, 0x02},
	{1, 0xed, 0x04},
	{1, 0xee, 0x60},
	{1, 0xef, 0x90},
	{1, 0xb6, 0x01},
	{1, 0x90, 0x01},
	{1, 0x91, 0x00},
	{1, 0x92, 0x00},
	{1, 0x93, 0x00},
	{1, 0x94, 0x00},
	{1, 0x95, 0x04},
	{1, 0x96, 0xb0},
	{1, 0x97, 0x06},
	{1, 0x98, 0x40},
	/**********************/
	/*********BLK *********/
	/*********************/
	{1, 0xfe, 0x00},
	{1, 0x18, 0x02},
	{1, 0x40, 0x42},
	{1, 0x41, 0x00},
	{1, 0x43, 0x5b},	/*0x54 */
	{1, 0x5e, 0x00},
	{1, 0x5f, 0x00},
	{1, 0x60, 0x00},
	{1, 0x61, 0x00},
	{1, 0x62, 0x00},
	{1, 0x63, 0x00},
	{1, 0x64, 0x00},
	{1, 0x65, 0x00},
	{1, 0x66, 0x20},
	{1, 0x67, 0x20},
	{1, 0x68, 0x20},
	{1, 0x69, 0x20},
	{1, 0x6a, 0x08},
	{1, 0x6b, 0x08},
	{1, 0x6c, 0x08},
	{1, 0x6d, 0x08},
	{1, 0x6e, 0x08},
	{1, 0x6f, 0x08},
	{1, 0x70, 0x08},
	{1, 0x71, 0x08},
	{1, 0x72, 0xf0},
	{1, 0x7e, 0x3c},
	{1, 0x7f, 0x00},
	{1, 0xfe, 0x00},
	/***********************/
	/******** AEC **********/
	/**********************/
	{1, 0xfe, 0x01},
	{1, 0x01, 0x08},
	{1, 0x02, 0xc0},
	{1, 0x03, 0x04},
	{1, 0x04, 0x90},
	{1, 0x05, 0x30},
	{1, 0x06, 0x98},
	{1, 0x07, 0x28},
	{1, 0x08, 0x6c},
	{1, 0x09, 0x00},
	{1, 0x0a, 0xc2},
	{1, 0x0b, 0x11},
	{1, 0x0c, 0x10},
	{1, 0x13, 0x2d},
	{1, 0x17, 0x00},
	{1, 0x1c, 0x11},
	{1, 0x1e, 0x61},
	{1, 0x1f, 0x30},
	{1, 0x20, 0x40},
	{1, 0x22, 0x80},
	{1, 0x23, 0x20},
	{1, 0x12, 0x35},
	{1, 0x15, 0x50},
	{1, 0x10, 0x31},
	{1, 0x3e, 0x28},
	{1, 0x3f, 0xe0},
	{1, 0x40, 0xe0},
	{1, 0x41, 0x08},
	{1, 0xfe, 0x02},
	{1, 0x0f, 0x05},
	{1, 0xfe, 0x02},
	{1, 0x90, 0x6c},
	{1, 0x91, 0x03},
	{1, 0x92, 0xc4},
	{1, 0x97, 0x64},
	{1, 0x98, 0x88},
	{1, 0x9d, 0x08},
	{1, 0xa2, 0x11},
	{1, 0xfe, 0x00},
	{1, 0xfe, 0x02},
	{1, 0x80, 0xc1},
	{1, 0x81, 0x08},
	{1, 0x82, 0x05},
	{1, 0x83, 0x04},
	{1, 0x84, 0x0a},
	{1, 0x86, 0x80},
	{1, 0x87, 0x30},
	{1, 0x88, 0x15},
	{1, 0x89, 0x80},
	{1, 0x8a, 0x60},
	{1, 0x8b, 0x30},
	/************************/
	/************ASDE*******/
	/***********************/
	{1, 0xfe, 0x01},
	{1, 0x21, 0x14},
	{1, 0xfe, 0x02},
	{1, 0x3c, 0x06},
	{1, 0x3d, 0x40},
	{1, 0x48, 0x30},
	{1, 0x49, 0x06},
	{1, 0x4b, 0x08},
	{1, 0x4c, 0x20},
	{1, 0xa3, 0x50},
	{1, 0xa4, 0x30},
	{1, 0xa5, 0x40},
	{1, 0xa6, 0x80},
	{1, 0xab, 0x40},
	{1, 0xae, 0x0c},
	{1, 0xb3, 0x42},
	{1, 0xb4, 0x24},
	{1, 0xb6, 0x50},
	{1, 0xb7, 0x01},
	{1, 0xb9, 0x28},
	{1, 0xfe, 0x00},
	/*gamma1 */
	{1, 0xfe, 0x02},
	{1, 0x10, 0x0d},
	{1, 0x11, 0x12},
	{1, 0x12, 0x17},
	{1, 0x13, 0x1c},
	{1, 0x14, 0x27},
	{1, 0x15, 0x34},
	{1, 0x16, 0x44},
	{1, 0x17, 0x55},
	{1, 0x18, 0x6e},
	{1, 0x19, 0x81},
	{1, 0x1a, 0x91},
	{1, 0x1b, 0x9c},
	{1, 0x1c, 0xaa},
	{1, 0x1d, 0xbb},
	{1, 0x1e, 0xca},
	{1, 0x1f, 0xd5},
	{1, 0x20, 0xe0},
	{1, 0x21, 0xe7},
	{1, 0x22, 0xed},
	{1, 0x23, 0xf6},
	{1, 0x24, 0xfb},
	{1, 0x25, 0xff},
	/*gamma2 */
	{1, 0xfe, 0x02},
	{1, 0x26, 0x0d},
	{1, 0x27, 0x12},
	{1, 0x28, 0x17},
	{1, 0x29, 0x1c},
	{1, 0x2a, 0x27},
	{1, 0x2b, 0x34},
	{1, 0x2c, 0x44},
	{1, 0x2d, 0x55},
	{1, 0x2e, 0x6e},
	{1, 0x2f, 0x81},
	{1, 0x30, 0x91},
	{1, 0x31, 0x9c},
	{1, 0x32, 0xaa},
	{1, 0x33, 0xbb},
	{1, 0x34, 0xca},
	{1, 0x35, 0xd5},
	{1, 0x36, 0xe0},
	{1, 0x37, 0xe7},
	{1, 0x38, 0xed},
	{1, 0x39, 0xf6},
	{1, 0x3a, 0xfb},
	{1, 0x3b, 0xff},
	/**********************/
	/**********YCP ********/
	/*********************/
	{1, 0xfe, 0x02},
	{1, 0xd1, 0x28},
	{1, 0xd2, 0x28},
	{1, 0xdd, 0x14},
	{1, 0xde, 0x88},
	{1, 0xed, 0x80},
	{1, 0xfe, 0x01},
	{1, 0xc2, 0x1f},
	{1, 0xc3, 0x13},
	{1, 0xc4, 0x0e},
	{1, 0xc8, 0x16},
	{1, 0xc9, 0x0f},
	{1, 0xca, 0x0c},
	{1, 0xbc, 0x52},
	{1, 0xbd, 0x2c},
	{1, 0xbe, 0x27},
	{1, 0xb6, 0x47},
	{1, 0xb7, 0x32},
	{1, 0xb8, 0x30},
	{1, 0xc5, 0x00},
	{1, 0xc6, 0x00},
	{1, 0xc7, 0x00},
	{1, 0xcb, 0x00},
	{1, 0xcc, 0x00},
	{1, 0xcd, 0x00},
	{1, 0xbf, 0x0e},
	{1, 0xc0, 0x00},
	{1, 0xc1, 0x00},
	{1, 0xb9, 0x08},
	{1, 0xba, 0x00},
	{1, 0xbb, 0x00},
	{1, 0xaa, 0x0a},
	{1, 0xab, 0x0c},
	{1, 0xac, 0x0d},
	{1, 0xad, 0x02},
	{1, 0xae, 0x06},
	{1, 0xaf, 0x05},
	{1, 0xb0, 0x00},
	{1, 0xb1, 0x05},
	{1, 0xb2, 0x02},
	{1, 0xb3, 0x04},
	{1, 0xb4, 0x04},
	{1, 0xb5, 0x05},
	{1, 0xd0, 0x00},
	{1, 0xd1, 0x00},
	{1, 0xd2, 0x00},
	{1, 0xd6, 0x02},
	{1, 0xd7, 0x00},
	{1, 0xd8, 0x00},
	{1, 0xd9, 0x00},
	{1, 0xda, 0x00},
	{1, 0xdb, 0x00},
	{1, 0xd3, 0x00},
	{1, 0xd4, 0x00},
	{1, 0xd5, 0x00},
	{1, 0xa4, 0x04},
	{1, 0xa5, 0x00},
	{1, 0xa6, 0x77},
	{1, 0xa7, 0x77},
	{1, 0xa8, 0x77},
	{1, 0xa9, 0x77},
	{1, 0xa1, 0x80},
	{1, 0xa2, 0x80},
	{1, 0xfe, 0x01},
	{1, 0xdc, 0x35},
	{1, 0xdd, 0x28},
	{1, 0xdf, 0x0d},
	{1, 0xe0, 0x70},
	{1, 0xe1, 0x78},
	{1, 0xe2, 0x70},
	{1, 0xe3, 0x78},
	{1, 0xe6, 0x90},
	{1, 0xe7, 0x70},
	{1, 0xe8, 0x90},
	{1, 0xe9, 0x70},
	{1, 0xfe, 0x00},

	/********** AWB***********/

	{1, 0xfe, 0x01},
	{1, 0x4f, 0x00},
	{1, 0x4f, 0x00},
	{1, 0x4b, 0x01},
	{1, 0x4f, 0x00},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x71},
	{1, 0x4e, 0x02},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x91},
	{1, 0x4e, 0x02},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x50},
	{1, 0x4e, 0x02},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x70},
	{1, 0x4e, 0x02},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x90},
	{1, 0x4e, 0x02},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xb0},
	{1, 0x4e, 0x02},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xd0},
	{1, 0x4e, 0x02},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x4f},
	{1, 0x4e, 0x02},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x6f},
	{1, 0x4e, 0x02},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x8f},
	{1, 0x4e, 0x02},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xaf},
	{1, 0x4e, 0x02},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xcf},
	{1, 0x4e, 0x02},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x6e},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x8e},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xae},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xce},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x4d},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x6d},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x8d},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xad},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xcd},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x4c},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x6c},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x8c},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xac},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xcc},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xec},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x4b},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x6b},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x8b},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xab},
	{1, 0x4e, 0x03},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0x8a},
	{1, 0x4e, 0x04},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xaa},
	{1, 0x4e, 0x04},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xca},
	{1, 0x4e, 0x04},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xa9},
	{1, 0x4e, 0x04},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xc9},
	{1, 0x4e, 0x04},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xcb},
	{1, 0x4e, 0x05},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xeb},
	{1, 0x4e, 0x05},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0x0b},
	{1, 0x4e, 0x05},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0x2b},
	{1, 0x4e, 0x05},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0x4b},
	{1, 0x4e, 0x05},
	{1, 0x4c, 0x01},
	{1, 0x4d, 0xea},
	{1, 0x4e, 0x05},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0x0a},
	{1, 0x4e, 0x05},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0x2a},
	{1, 0x4e, 0x05},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0x6a},
	{1, 0x4e, 0x06},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0x29},
	{1, 0x4e, 0x06},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0x49},
	{1, 0x4e, 0x06},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0x69},
	{1, 0x4e, 0x06},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0x89},
	{1, 0x4e, 0x06},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0xa9},
	{1, 0x4e, 0x06},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0xc9},
	{1, 0x4e, 0x06},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0x48},
	{1, 0x4e, 0x06},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0x68},
	{1, 0x4e, 0x06},
	{1, 0x4c, 0x03},
	{1, 0x4d, 0x09},
	{1, 0x4e, 0x07},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0xa8},
	{1, 0x4e, 0x07},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0xc8},
	{1, 0x4e, 0x07},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0xe8},
	{1, 0x4e, 0x07},
	{1, 0x4c, 0x03},
	{1, 0x4d, 0x08},
	{1, 0x4e, 0x07},
	{1, 0x4c, 0x03},
	{1, 0x4d, 0x28},
	{1, 0x4e, 0x07},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0x87},
	{1, 0x4e, 0x07},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0xa7},
	{1, 0x4e, 0x07},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0xc7},
	{1, 0x4e, 0x07},
	{1, 0x4c, 0x02},
	{1, 0x4d, 0xe7},
	{1, 0x4e, 0x07},
	{1, 0x4c, 0x03},
	{1, 0x4d, 0x07},
	{1, 0x4e, 0x07},
	{1, 0x4f, 0x01},
	{1, 0xfe, 0x01},

	{1, 0x50, 0x80},
	{1, 0x51, 0xa8},
	{1, 0x52, 0x57},
	{1, 0x53, 0x38},
	{1, 0x54, 0xc7},
	{1, 0x56, 0x0e},
	{1, 0x58, 0x08},
	{1, 0x5b, 0x00},
	{1, 0x5c, 0x74},
	{1, 0x5d, 0x8b},
	{1, 0x61, 0xd3},
	{1, 0x62, 0x90},
	{1, 0x63, 0xaa},
	{1, 0x65, 0x04},
	{1, 0x67, 0xb2},
	{1, 0x68, 0xac},
	{1, 0x69, 0x00},
	{1, 0x6a, 0xb2},
	{1, 0x6b, 0xac},
	{1, 0x6c, 0xdc},
	{1, 0x6d, 0xb0},
	{1, 0x6e, 0x30},
	{1, 0x6f, 0x40},
	{1, 0x70, 0x05},
	{1, 0x71, 0x80},
	{1, 0x72, 0x80},
	{1, 0x73, 0x30},
	{1, 0x74, 0x01},
	{1, 0x75, 0x01},
	{1, 0x7f, 0x08},
	{1, 0x76, 0x70},
	{1, 0x77, 0x48},
	{1, 0x78, 0xa0},
	{1, 0xfe, 0x00},
	{1, 0xfe, 0x02},
	{1, 0xc0, 0x01},
	{1, 0xc1, 0x4a},
	{1, 0xc2, 0xf3},
	{1, 0xc3, 0xfc},
	{1, 0xc4, 0xe4},
	{1, 0xc5, 0x48},
	{1, 0xc6, 0xec},
	{1, 0xc7, 0x45},
	{1, 0xc8, 0xf8},
	{1, 0xc9, 0x02},
	{1, 0xca, 0xfe},
	{1, 0xcb, 0x42},
	{1, 0xcc, 0x00},
	{1, 0xcd, 0x45},
	{1, 0xce, 0xf0},
	{1, 0xcf, 0x00},
	{1, 0xe3, 0xf0},
	{1, 0xe4, 0x45},
	{1, 0xe5, 0xe8},
	{1, 0xfe, 0x01},
	{1, 0x9f, 0x42},
	{1, 0xfe, 0x00},
	{1, 0xfe, 0x00},
	{1, 0x05, 0x01},
	{1, 0x06, 0x56},
	{1, 0x07, 0x00},
	{1, 0x08, 0x32},
	{1, 0xfe, 0x01},
	{1, 0x25, 0x00},
	{1, 0x26, 0xfa},
	{1, 0x27, 0x04},
	{1, 0x28, 0xe2},	/*20fps */
	{1, 0x29, 0x04},
	{1, 0x2a, 0xe2},	/*16fps */
	{1, 0x2b, 0x04},
	{1, 0x2c, 0xe2},	/*10fps */
	{1, 0x2d, 0x04},
	{1, 0x2e, 0xe2},	/*8fps */
	{1, 0xfe, 0x00},
	{1, 0xfe, 0x00},
	{1, 0xfa, 0x00},
	{1, 0xfd, 0x01},
	{1, 0xfe, 0x00},
	{1, 0x90, 0x01},
	{1, 0x91, 0x00},
	{1, 0x92, 0x00},
	{1, 0x93, 0x00},
	{1, 0x94, 0x00},
	{1, 0x95, 0x02},
	{1, 0x96, 0x58},
	{1, 0x97, 0x03},
	{1, 0x98, 0x20},
	{1, 0x99, 0x11},
	{1, 0x9a, 0x06},
	{1, 0xfe, 0x00},
	{1, 0xec, 0x01},
	{1, 0xed, 0x02},
	{1, 0xee, 0x30},
	{1, 0xef, 0x48},
	{1, 0xfe, 0x01},
	{1, 0x74, 0x00},
	{1, 0xfe, 0x01},
	{1, 0x01, 0x04},
	{1, 0x02, 0x60},
	{1, 0x03, 0x02},
	{1, 0x04, 0x48},
	{1, 0x05, 0x18},
	{1, 0x06, 0x4c},
	{1, 0x07, 0x14},
	{1, 0x08, 0x36},
	{1, 0x0a, 0xc0},
	{1, 0x21, 0x14},
	{1, 0xfe, 0x00},
	{1, 0xfe, 0x00},
	{1, 0xc3, 0x11},
	{1, 0xc4, 0x20},
	{1, 0xc5, 0x30},
	{1, 0xfe, 0x00},
	{1, 0xfe, 0x00},
	{1, 0xf2, 0x0f},

	ENDMARKER,
};

/* 800*600: SVGA*/
static const struct regval_list module_svga_regs[] = {
	{1, 0xfe, 0x00},
	{1, 0xfa, 0x00},
	{1, 0xfd, 0x01},
	{1, 0xb6, 0x01},

	{1, 0xfe, 0x00},
	{1, 0x99, 0x11},
	{1, 0x9a, 0x06},
	{1, 0x9b, 0x00},
	{1, 0x9c, 0x00},
	{1, 0x9d, 0x00},
	{1, 0x9e, 0x00},
	{1, 0x9f, 0x00},
	{1, 0xa0, 0x00},
	{1, 0xa1, 0x00},
	{1, 0xa2, 0x00},
	/* crop window */
	{1, 0xfe, 0x00},
	{1, 0x90, 0x01},
	{1, 0x91, 0x00},
	{1, 0x92, 0x00},
	{1, 0x93, 0x00},
	{1, 0x94, 0x00},
	{1, 0x95, 0x02},
	{1, 0x96, 0x58},
	{1, 0x97, 0x03},
	{1, 0x98, 0x20},
	{1, 0x99, 0x11},
	{1, 0x9a, 0x06},
	/* AWB  */
	{1, 0xfe, 0x00},
	{1, 0xec, 0x01},
	{1, 0xed, 0x02},
	{1, 0xee, 0x30},
	{1, 0xef, 0x48},
	{1, 0xfe, 0x01},
	{1, 0x74, 0x00},
	/* AEC */
	{1, 0xfe, 0x01},
	{1, 0x01, 0x04},
	{1, 0x02, 0x60},
	{1, 0x03, 0x02},
	{1, 0x04, 0x48},
	{1, 0x05, 0x18},
	{1, 0x06, 0x4c},
	{1, 0x07, 0x14},
	{1, 0x08, 0x36},
	{1, 0x0a, 0xc0},
	{1, 0x21, 0x14},
	{1, 0xfe, 0x00},
	/* gamma */
	{1, 0xfe, 0x00},
	{1, 0xc3, 0x11},
	{1, 0xc4, 0x20},
	{1, 0xc5, 0x30},
	{1, 0xfe, 0x00},
	ENDMARKER,
};

/* 1280*720: 720P*/
static const struct regval_list module_720p_regs[] = {
	{1, 0xfe, 0x00},
	{1, 0xfa, 0x11},
	{1, 0xb6, 0x01},
	{1, 0xfd, 0x00},
	/* crop window */

	{1, 0xfe, 0x00},
	{1, 0x99, 0x55},
	{1, 0x9a, 0x06},
	{1, 0x9b, 0x00},
	{1, 0x9c, 0x00},
	{1, 0x9d, 0x01},
	{1, 0x9e, 0x23},
	{1, 0x9f, 0x00},
	{1, 0xa0, 0x00},
	{1, 0xa1, 0x01},
	{1, 0xa2, 0x23},

	{1, 0x90, 0x01},
	{1, 0x91, 0x00},
	{1, 0x92, 0x78},
	{1, 0x93, 0x00},
	{1, 0x94, 0x00},
	{1, 0x95, 0x02},
	{1, 0x96, 0xd0},
	{1, 0x97, 0x05},
	{1, 0x98, 0x00},

	/* AWB   */
	{1, 0xfe, 0x00},
	{1, 0xec, 0x02},
	{1, 0xed, 0x04},
	{1, 0xee, 0x60},
	{1, 0xef, 0x90},
	{1, 0xfe, 0x01},
	{1, 0x74, 0x01},
	/* AEC   */
	{1, 0xfe, 0x01},
	{1, 0x01, 0x08},
	{1, 0x02, 0xc0},
	{1, 0x03, 0x04},
	{1, 0x04, 0x90},
	{1, 0x05, 0x30},
	{1, 0x06, 0x98},
	{1, 0x07, 0x28},
	{1, 0x08, 0x6c},
	{1, 0x0a, 0xc2},
	{1, 0x21, 0x15},
	{1, 0xfe, 0x00},
	/* gamma */
	{1, 0xfe, 0x00},
	{1, 0xc3, 0x11},
	{1, 0xc4, 0x20},
	{1, 0xc5, 0x30},
	{1, 0xfe, 0x00},
	ENDMARKER,
};

/* 1600*1200: UXGA*/
static const struct regval_list module_uxga_regs[] = {
	{1, 0xfe, 0x00},
	{1, 0xfa, 0x00},
	{1, 0xfd, 0x00},
	{1, 0xfe, 0x00},
	{1, 0x99, 0x11},
	{1, 0x9a, 0x06},
	{1, 0x9b, 0x00},
	{1, 0x9c, 0x00},
	{1, 0x9d, 0x00},
	{1, 0x9e, 0x00},
	{1, 0x9f, 0x00},
	{1, 0xa0, 0x00},
	{1, 0xa1, 0x00},
	{1, 0xa2, 0x00},
	/*  crop window */
	{1, 0xfe, 0x00},
	{1, 0x90, 0x01},
	{1, 0x91, 0x00},
	{1, 0x92, 0x00},
	{1, 0x93, 0x00},
	{1, 0x94, 0x00},
	{1, 0x95, 0x04},
	{1, 0x96, 0xb0},
	{1, 0x97, 0x06},
	{1, 0x98, 0x40},
	{1, 0x99, 0x11},
	{1, 0x9a, 0x06},
	/* AWB */
	{1, 0xfe, 0x00},
	{1, 0xec, 0x02},
	{1, 0xed, 0x04},
	{1, 0xee, 0x60},
	{1, 0xef, 0x90},
	{1, 0xfe, 0x01},
	{1, 0x74, 0x01},
	/* AEC */
	{1, 0xfe, 0x01},
	{1, 0x01, 0x08},
	{1, 0x02, 0xc0},
	{1, 0x03, 0x04},
	{1, 0x04, 0x90},
	{1, 0x05, 0x30},
	{1, 0x06, 0x98},
	{1, 0x07, 0x28},
	{1, 0x08, 0x6c},
	{1, 0x0a, 0xc2},
	/*if 0xfa=11,then 0x21=15;else if 0xfa=00,then 0x21=14*/
	{1, 0x21, 0x15},
	{1, 0xfe, 0x00},
	/* gamma */
	{1, 0xfe, 0x00},
	/*if shutter/2 when capture,then exp_gamma_th/2*/
	{1, 0xc3, 0x00},
	{1, 0xc4, 0x90},
	{1, 0xc5, 0x98},
	{1, 0xfe, 0x00},
	ENDMARKER,
};

/*
 * window size list
 */
/*S VGA */
static struct camera_module_win_size module_win_svga = {
	.name = "SVGA",
	.width = WIDTH_SVGA,
	.height = HEIGHT_SVGA,
	.win_regs = module_svga_regs,
	.frame_rate_array = frame_rate_svga,
	.capture_only = 0,
};

/* 1280*720 */
static struct camera_module_win_size module_win_720p = {
	.name = "720P",
	.width = WIDTH_720P,
	.height = HEIGHT_720P,
	.win_regs = module_720p_regs,
	.frame_rate_array = frame_rate_720p,
	.capture_only = 0,
};

/* 1600*1200 */
static struct camera_module_win_size module_win_uxga = {
	.name = "UXGA",
	.width = WIDTH_UXGA,
	.height = HEIGHT_UXGA,
	.win_regs = module_uxga_regs,
	.frame_rate_array = frame_rate_uxga,
	.capture_only = 1,
};

static struct camera_module_win_size *module_win_list[] = {
	&module_win_svga,
	&module_win_720p,
	&module_win_uxga,
};

static struct v4l2_ctl_cmd_info v4l2_ctl_array[] = {
	{
	 .id = V4L2_CID_GAIN,
	 .min = 256,
	 .max = 0XFFFF,
	 .step = 1,
	 .def = 2560,
	 },
	{
	 .id = V4L2_CID_AUTO_WHITE_BALANCE,
	 .min = 0,
	 .max = 1,
	 .step = 1,
	 .def = 1,
	 },
	{
	 .id = V4L2_CID_WHITE_BALANCE_TEMPERATURE,
	 .min = 0,
	 .max = 3,
	 .step = 1,
	 .def = 1,
	 },
	{
	 .id = V4L2_CID_SENSOR_ID,
	 .min = 0,
	 .max = 0xffffff,
	 .step = 1,
	 .def = 0,
	 },
};

static struct v4l2_ctl_cmd_info_menu v4l2_ctl_array_menu[] = {
	{
	 .id = V4L2_CID_COLORFX,
	 .max = 3,
	 .mask = 0x0,
	 .def = 0,
	 },
	{
	 .id = V4L2_CID_EXPOSURE_AUTO,
	 .max = 1,
	 .mask = 0x0,
	 .def = 1,
	 },
};

#endif				/* __MODULE_DIFF_H__ */
